}
}
# monocle_cds <- orderCells(monocle_cds[var_genes,], root_state = GM_state(monocle_cds, 'D4.5_Arm_5'))
cell_traject <- plot_cell_trajectory(monocle_cds,
color_by = "seurat_clusters",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(colors))
cell_traject_state <- plot_cell_trajectory(monocle_cds,
color_by = "State",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(condition_color))
cell_traject_withstart_defined <- plot_cell_trajectory(monocle_cds, color_by = "Pseudotime") +
scale_colour_gradientn(colours = colorRampPalette(c('#6EAEA1', '#F2BF49', '#A40000'))(5))
saveRDS(monocle_cds, paste0(output_file, '/monocle2_obj_raw_vst_mp=2.rds'))
pdf(paste0(output_file, '/cell_trajectory.pdf'), height = 8, width = 18, onefile = T)
plot_grid(cell_traject, cell_traject_state)
dev.off()
output_file = 'BoolODE_Clustering_Traiectory/G50_C100/'
Celltype = unlist(strsplit(output_file, '/'))[3]
Celltype
Celltype = unlist(strsplit(output_file, '/'))[2]
Expr = read.csv(paste0(input_file, '/ExpressionData.csv'), header = T, row.names = 1)
Design = data.frame(row.names = colnames(Expr),
cell_names = colnames(Expr),
cell_type = rep(Celltype, ncol(Expr)))
sce = SingleCellExperiment(assays = list(counts = as.matrix(Expr)), colData = Design) %>%
calculateQCMetrics()
cell_info = as.data.frame(colData(sce))
#filter by GENE > 500 and UMI > 5000
selected_cells = cell_info %>%
dplyr::filter(total_features_by_counts > nrow(cell_info) * 0 & total_counts > nrow(cell_info) * 0)
selected_expr = Expr[,colnames(Expr) %in% as.character(selected_cells$cell_names)]
SC3_Sureat <- CreateSeuratObject(counts = selected_expr,
meta.data = Design[colnames(selected_expr),])
#quality control
SC3_Sureat <- NormalizeData(SC3_Sureat)
SC3_Sureat <- ScaleData(SC3_Sureat)
SC3_Sureat <- FindVariableFeatures(object = SC3_Sureat,
selection.method = 'dispersion')
SC3_Sureat <- RunPCA(object = SC3_Sureat, pcs.compute = 10, pc.genes = SC3_Sureat@var.genes, do.print = F)
ElbowPlot(object = SC3_Sureat, ndims = 10)
ElbowPlot(object = SC3_Sureat, ndims = 30)
dim(selected_expr)
input_file = '~/MING_V9T/PhD_Pro/Test/Simulation/BoolODE_Data/G50_C100/'
output_file = 'BoolODE_Clustering_Traiectory/G50_C100/'
Celltype = unlist(strsplit(output_file, '/'))[2]
Expr = read.csv(paste0(input_file, '/ExpressionData.csv'), header = T, row.names = 1)
Design = data.frame(row.names = colnames(Expr),
cell_names = colnames(Expr),
cell_type = rep(Celltype, ncol(Expr)))
sce = SingleCellExperiment(assays = list(counts = as.matrix(Expr)), colData = Design) %>%
calculateQCMetrics()
cell_info = as.data.frame(colData(sce))
#filter by GENE > 500 and UMI > 5000
selected_cells = cell_info %>%
dplyr::filter(total_features_by_counts > nrow(cell_info) * 0 & total_counts > nrow(cell_info) * 0)
selected_expr = Expr[,colnames(Expr) %in% as.character(selected_cells$cell_names)]
SC3_Sureat <- CreateSeuratObject(counts = selected_expr,
meta.data = Design[colnames(selected_expr),])
#quality control
SC3_Sureat <- NormalizeData(SC3_Sureat)
SC3_Sureat <- ScaleData(SC3_Sureat)
SC3_Sureat <- FindVariableFeatures(object = SC3_Sureat,
selection.method = 'dispersion')
SC3_Sureat <- RunPCA(object = SC3_Sureat, pcs.compute = 10, pc.genes = SC3_Sureat@var.genes, do.print = F)
ElbowPlot(object = SC3_Sureat, ndims = 30)
npc = 5
kpara = 100
kpara = 20
npc = 10
kpara = 20
#check pcs
SC3_Sureat <- FindNeighbors(SC3_Sureat, k.param = kpara, nn.eps = 0.5, dims = 1:npc)
SC3_Sureat <- FindClusters(object = SC3_Sureat, resolution = 0.8,
print.output = 1, save.SNN = F, n.iter = 1000)
library(cowplot)
SC3_Sureat <- RunTSNE(object = SC3_Sureat, reduction = "pca", dims = 1:npc, nthreads = 8, max_iter = 2000, check_duplicates = F)
SC3_Sureat <- RunUMAP(object = SC3_Sureat, dims = 1:npc, min_dist = 0.75)
colors <- c('#8DC73F','#25CED1','#FF8A5B', '#EA526F', '#FFCA04','#731DD8',
'#ED7B95', '#FFEA7F', '#97BC8B', '#25B07B',  '#C595CC', '#FC7500', '#A41306', '#1F363D', '#37A865')
condition_color = c('#BF4342', '#033F63','#FCB033', '#4B1D6D', '#352320', '#2A3D45', '#53713D',
'#C1909D', '#8B6878', '#30A9C2', '#43B09B')
tmp <- as.factor(as.numeric(SC3_Sureat@active.ident))
names(tmp) <- names(SC3_Sureat@active.ident)
SC3_Sureat@active.ident <- tmp
p1 <- DimPlot(object = SC3_Sureat, reduction = "tsne", do.return = TRUE, group.by = "ident", vector.friendly = TRUE, pt.size = 2, cols = colors) + ggtitle("tSNE") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p2 <- DimPlot(object = SC3_Sureat, reduction = "umap", do.return = TRUE,
vector.friendly = TRUE, pt.size = 2, cols = colors) + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p3 <- DimPlot(object = SC3_Sureat, reduction = "tsne", do.return = TRUE, group.by = 'cell_type', cols = condition_color,
vector.friendly = TRUE, pt.size = 2) + ggtitle("Cell type") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p4 <- DimPlot(object = SC3_Sureat, reduction = "umap", do.return = TRUE, group.by = 'cell_type', cols = condition_color,
vector.friendly = TRUE, pt.size = 2) + ggtitle("Cell Type") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
data.use = SC3_Sureat@assays$RNA@scale.data
ident_cell = as.data.frame(sort(SC3_Sureat@active.ident))
annotation = data.frame(row.names = SC3_Sureat@meta.data$cell_names,
cell.type = SC3_Sureat@meta.data$cell_type,
cluster = SC3_Sureat@active.ident)
cell_cluster_df = plyr::count(annotation, vars = c('cluster', 'cell.type'))
cell_count <- column_to_rownames(as.data.frame(aggregate(freq ~ cell.type, data = cell_cluster_df, sum)),'cell.type')
cell_cluster_df$percent <- paste(format((cell_cluster_df$freq / cell_count[cell_cluster_df$cell.type,]) * 100, digits = 2),"%", sep = "")
p5 <- ggbarplot(cell_cluster_df, x = 'cluster', y = "freq",
fill = "cell.type",
# color = c('#FB4944', '#9659D9'),
palette =  condition_color,
xlab = "Clusters",
ylab = "Cell Counts",
# label = "percent", lab.size = 10, lab.vjust = 1.2,
orientation = 'horiz') + theme(text = element_text(size=40),
axis.text.x = element_text(angle=90, hjust=1))
pdf(paste0(output_file, 'Cluster_Res.pdf'), height = 25, width = 50)
pdf(paste0(output_file, 'Cluster_Res.pdf'), height = 25, width = 50)
plot_grid(plot_grid(plot_grid(p1, p3), plot_grid(p2, p4), nrow = 2), p5, ncol = 2)
dev.off()
saveRDS(SC3_Sureat, paste0(output_file, 'Seurat_', 'K=', length(unique(SC3_Sureat@meta.data$seurat_clusters)),
'_PC=', npc, '_K.para=', kpara, '.rds'))
for(i in levels(SC3_Sureat@active.ident)){
tmp <- FindMarkers(SC3_Sureat, ident.1 = i) %>% rownames_to_column(., 'GeneName')
write.xlsx(tmp[order(tmp$avg_logFC, decreasing = T),], file = paste0(output_file,'Cluster_', i, '_Markergenes.xlsx'))
}
files <- list.files(path = output_file, pattern = "*Markergenes.xlsx",
full.names = T, recursive = F)
i = 20
selected_genes <- NULL
for (fi in files){
tmp <- read.xlsx(fi) %>% filter(p_val_adj < 0.05)
selected_genes <- c(selected_genes, head(tmp$GeneName, n = i))
}
pdf(paste0(output_file, 'Top',i, '_MarkerGene_Heatmap.pdf'), height = ifelse(length(selected_genes) == 30, 15, 25), width = 15)
DoHeatmap(SC3_Sureat, features = selected_genes, group.colors = colors)
dev.off()
data <- as(as.matrix(SC3_Sureat@assays$RNA@counts), 'sparseMatrix')
pd <- new('AnnotatedDataFrame', data = SC3_Sureat@meta.data[colnames(data),])
fData <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fData)
#Construct monocle cds
monocle_cds <- newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0,
expressionFamily = negbinomial.size())
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
#Run ordering algorithm
var_genes <- SC3_Sureat[['RNA']]@var.features
monocle_cds <- setOrderingFilter(monocle_cds, var_genes)
monocle_cds <- monocle_cds[var_genes,]
monocle_cds <- reduceDimension(monocle_cds, norm_method = 'vstExprs',
reduction_method="DDRTree",
max_components=2,
scaling=TRUE,
verbose=TRUE,
ncenter = 200,
pseudo_expr=0)
monocle_cds <- reduceDimension(monocle_cds, norm_method = 'vstExprs',
reduction_method="DDRTree",
max_components=2,
scaling=TRUE,
verbose=TRUE,
pseudo_expr=0)
dim(monocle_cds)
?reduceDimension
monocle_cds <- reduceDimension(monocle_cds, norm_method = 'vstExprs',
reduction_method="DDRTree",
max_components=2,
scaling=TRUE,
verbose=TRUE,
ncenter = 100,
pseudo_expr=0)
monocle_cds <- reduceDimension(monocle_cds, norm_method = 'vstExprs',
reduction_method="DDRTree",
max_components=2,
scaling=TRUE,
verbose=TRUE,
ncenter = 50,
pseudo_expr=0)
nrow(monocle_cds)
monocle_cds <- orderCells(monocle_cds)
monocle_cds$seurat_clusters <- as.factor(as.numeric(SC3_Sureat@active.ident[colnames(data)]))
monocle_cds$seurat_clusters <- paste0(monocle_cds$cell_type, '_',
as.factor(as.numeric(monocle_cds$seurat_clusters)))
GM_state <- function(cds, starter){
if (length(unique(pData(cds)$State)) > 1){
T0_counts <- table(pData(cds)$State, pData(cds)$seurat_cluster)[,starter]
return(as.numeric(names(T0_counts)[which
(T0_counts == max(T0_counts))]))
} else {
return (1)
}
}
# monocle_cds <- orderCells(monocle_cds[var_genes,], root_state = GM_state(monocle_cds, 'D4.5_Arm_5'))
cell_traject <- plot_cell_trajectory(monocle_cds,
color_by = "seurat_clusters",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(colors))
cell_traject_state <- plot_cell_trajectory(monocle_cds,
color_by = "State",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(condition_color))
cell_traject_withstart_defined <- plot_cell_trajectory(monocle_cds, color_by = "Pseudotime") +
scale_colour_gradientn(colours = colorRampPalette(c('#6EAEA1', '#F2BF49', '#A40000'))(5))
saveRDS(monocle_cds, paste0(output_file, '/monocle2_obj_raw_vst_mp=2.rds'))
pdf(paste0(output_file, '/cell_trajectory.pdf'), height = 8, width = 18, onefile = T)
plot_grid(cell_traject, cell_traject_state)
dev.off()
input_file = '~/MING_V9T/PhD_Pro/Test/Simulation/BoolODE_Data/G50_C1000/'
output_file = 'BoolODE_Clustering_Traiectory/G50_C1000/'
Celltype = unlist(strsplit(output_file, '/'))[2]
Expr = read.csv(paste0(input_file, '/ExpressionData.csv'), header = T, row.names = 1)
Design = data.frame(row.names = colnames(Expr),
cell_names = colnames(Expr),
cell_type = rep(Celltype, ncol(Expr)))
sce = SingleCellExperiment(assays = list(counts = as.matrix(Expr)), colData = Design) %>%
calculateQCMetrics()
cell_info = as.data.frame(colData(sce))
#filter by GENE > 500 and UMI > 5000
selected_cells = cell_info %>%
dplyr::filter(total_features_by_counts > nrow(cell_info) * 0 & total_counts > nrow(cell_info) * 0)
selected_expr = Expr[,colnames(Expr) %in% as.character(selected_cells$cell_names)]
SC3_Sureat <- CreateSeuratObject(counts = selected_expr,
meta.data = Design[colnames(selected_expr),])
#quality control
SC3_Sureat <- NormalizeData(SC3_Sureat)
SC3_Sureat <- ScaleData(SC3_Sureat)
SC3_Sureat <- FindVariableFeatures(object = SC3_Sureat,
selection.method = 'dispersion')
SC3_Sureat <- RunPCA(object = SC3_Sureat, pcs.compute = 10, pc.genes = SC3_Sureat@var.genes, do.print = F)
ElbowPlot(object = SC3_Sureat, ndims = 30)
npc = 10
kpara = 100
#check pcs
SC3_Sureat <- FindNeighbors(SC3_Sureat, k.param = kpara, nn.eps = 0.5, dims = 1:npc)
SC3_Sureat <- FindClusters(object = SC3_Sureat, resolution = 0.8,
print.output = 1, save.SNN = F, n.iter = 1000)
library(cowplot)
SC3_Sureat <- RunTSNE(object = SC3_Sureat, reduction = "pca", dims = 1:npc, nthreads = 8, max_iter = 2000, check_duplicates = F)
SC3_Sureat <- RunUMAP(object = SC3_Sureat, dims = 1:npc, min_dist = 0.75)
colors <- c('#8DC73F','#25CED1','#FF8A5B', '#EA526F', '#FFCA04','#731DD8',
'#ED7B95', '#FFEA7F', '#97BC8B', '#25B07B',  '#C595CC', '#FC7500', '#A41306', '#1F363D', '#37A865')
condition_color = c('#BF4342', '#033F63','#FCB033', '#4B1D6D', '#352320', '#2A3D45', '#53713D',
'#C1909D', '#8B6878', '#30A9C2', '#43B09B')
tmp <- as.factor(as.numeric(SC3_Sureat@active.ident))
names(tmp) <- names(SC3_Sureat@active.ident)
SC3_Sureat@active.ident <- tmp
p1 <- DimPlot(object = SC3_Sureat, reduction = "tsne", do.return = TRUE, group.by = "ident", vector.friendly = TRUE, pt.size = 2, cols = colors) + ggtitle("tSNE") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p2 <- DimPlot(object = SC3_Sureat, reduction = "umap", do.return = TRUE,
vector.friendly = TRUE, pt.size = 2, cols = colors) + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p3 <- DimPlot(object = SC3_Sureat, reduction = "tsne", do.return = TRUE, group.by = 'cell_type', cols = condition_color,
vector.friendly = TRUE, pt.size = 2) + ggtitle("Cell type") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p4 <- DimPlot(object = SC3_Sureat, reduction = "umap", do.return = TRUE, group.by = 'cell_type', cols = condition_color,
vector.friendly = TRUE, pt.size = 2) + ggtitle("Cell Type") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
data.use = SC3_Sureat@assays$RNA@scale.data
ident_cell = as.data.frame(sort(SC3_Sureat@active.ident))
annotation = data.frame(row.names = SC3_Sureat@meta.data$cell_names,
cell.type = SC3_Sureat@meta.data$cell_type,
cluster = SC3_Sureat@active.ident)
cell_cluster_df = plyr::count(annotation, vars = c('cluster', 'cell.type'))
cell_count <- column_to_rownames(as.data.frame(aggregate(freq ~ cell.type, data = cell_cluster_df, sum)),'cell.type')
cell_cluster_df$percent <- paste(format((cell_cluster_df$freq / cell_count[cell_cluster_df$cell.type,]) * 100, digits = 2),"%", sep = "")
p5 <- ggbarplot(cell_cluster_df, x = 'cluster', y = "freq",
fill = "cell.type",
# color = c('#FB4944', '#9659D9'),
palette =  condition_color,
xlab = "Clusters",
ylab = "Cell Counts",
# label = "percent", lab.size = 10, lab.vjust = 1.2,
orientation = 'horiz') + theme(text = element_text(size=40),
axis.text.x = element_text(angle=90, hjust=1))
pdf(paste0(output_file, 'Cluster_Res.pdf'), height = 25, width = 50)
plot_grid(plot_grid(plot_grid(p1, p3), plot_grid(p2, p4), nrow = 2), p5, ncol = 2)
dev.off()
saveRDS(SC3_Sureat, paste0(output_file, 'Seurat_', 'K=', length(unique(SC3_Sureat@meta.data$seurat_clusters)),
'_PC=', npc, '_K.para=', kpara, '.rds'))
for(i in levels(SC3_Sureat@active.ident)){
tmp <- FindMarkers(SC3_Sureat, ident.1 = i) %>% rownames_to_column(., 'GeneName')
write.xlsx(tmp[order(tmp$avg_logFC, decreasing = T),], file = paste0(output_file,'Cluster_', i, '_Markergenes.xlsx'))
}
files <- list.files(path = output_file, pattern = "*Markergenes.xlsx",
full.names = T, recursive = F)
i = 20
selected_genes <- NULL
for (fi in files){
tmp <- read.xlsx(fi) %>% filter(p_val_adj < 0.05)
selected_genes <- c(selected_genes, head(tmp$GeneName, n = i))
}
pdf(paste0(output_file, 'Top',i, '_MarkerGene_Heatmap.pdf'), height = ifelse(length(selected_genes) == 30, 15, 25), width = 15)
DoHeatmap(SC3_Sureat, features = selected_genes, group.colors = colors)
dev.off()
library(monocle)
data <- as(as.matrix(SC3_Sureat@assays$RNA@counts), 'sparseMatrix')
# data <- data[,colMeans(data) > 0.3]
pd <- new('AnnotatedDataFrame', data = SC3_Sureat@meta.data[colnames(data),])
fData <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fData)
#Construct monocle cds
monocle_cds <- newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0,
expressionFamily = negbinomial.size())
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
#Run ordering algorithm
var_genes <- SC3_Sureat[['RNA']]@var.features
monocle_cds <- setOrderingFilter(monocle_cds, var_genes)
monocle_cds <- monocle_cds[var_genes,]
monocle_cds <- reduceDimension(monocle_cds, norm_method = 'vstExprs',
reduction_method="DDRTree",
max_components=2,
scaling=TRUE,
verbose=TRUE,
ncenter = nrow(monocle_cds),
pseudo_expr=0)
monocle_cds <- orderCells(monocle_cds)
monocle_cds$seurat_clusters <- as.factor(as.numeric(SC3_Sureat@active.ident[colnames(data)]))
monocle_cds$seurat_clusters <- paste0(monocle_cds$cell_type, '_',
as.factor(as.numeric(monocle_cds$seurat_clusters)))
GM_state <- function(cds, starter){
if (length(unique(pData(cds)$State)) > 1){
T0_counts <- table(pData(cds)$State, pData(cds)$seurat_cluster)[,starter]
return(as.numeric(names(T0_counts)[which
(T0_counts == max(T0_counts))]))
} else {
return (1)
}
}
# monocle_cds <- orderCells(monocle_cds[var_genes,], root_state = GM_state(monocle_cds, 'D4.5_Arm_5'))
cell_traject <- plot_cell_trajectory(monocle_cds,
color_by = "seurat_clusters",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(colors))
cell_traject_state <- plot_cell_trajectory(monocle_cds,
color_by = "State",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(condition_color))
cell_traject_withstart_defined <- plot_cell_trajectory(monocle_cds, color_by = "Pseudotime") +
scale_colour_gradientn(colours = colorRampPalette(c('#6EAEA1', '#F2BF49', '#A40000'))(5))
saveRDS(monocle_cds, paste0(output_file, '/monocle2_obj_raw_vst_mp=2.rds'))
pdf(paste0(output_file, '/cell_trajectory.pdf'), height = 8, width = 18, onefile = T)
plot_grid(cell_traject, cell_traject_state)
dev.off()
input_file = '~/MING_V9T/PhD_Pro/Test/Simulation/BoolODE_Data/G50_C5000/'
output_file = 'BoolODE_Clustering_Traiectory/G50_C5000/'
Celltype = unlist(strsplit(output_file, '/'))[2]
Expr = read.csv(paste0(input_file, '/ExpressionData.csv'), header = T, row.names = 1)
Design = data.frame(row.names = colnames(Expr),
cell_names = colnames(Expr),
cell_type = rep(Celltype, ncol(Expr)))
sce = SingleCellExperiment(assays = list(counts = as.matrix(Expr)), colData = Design) %>%
calculateQCMetrics()
cell_info = as.data.frame(colData(sce))
#filter by GENE > 500 and UMI > 5000
selected_cells = cell_info %>%
dplyr::filter(total_features_by_counts > nrow(cell_info) * 0 & total_counts > nrow(cell_info) * 0)
selected_expr = Expr[,colnames(Expr) %in% as.character(selected_cells$cell_names)]
SC3_Sureat <- CreateSeuratObject(counts = selected_expr,
meta.data = Design[colnames(selected_expr),])
#quality control
SC3_Sureat <- NormalizeData(SC3_Sureat)
SC3_Sureat <- ScaleData(SC3_Sureat)
SC3_Sureat <- FindVariableFeatures(object = SC3_Sureat,
selection.method = 'dispersion')
SC3_Sureat <- RunPCA(object = SC3_Sureat, pcs.compute = 10, pc.genes = SC3_Sureat@var.genes, do.print = F)
ElbowPlot(object = SC3_Sureat, ndims = 30)
npc = 10
kpara = 100
#check pcs
SC3_Sureat <- FindNeighbors(SC3_Sureat, k.param = kpara, nn.eps = 0.5, dims = 1:npc)
SC3_Sureat <- FindClusters(object = SC3_Sureat, resolution = 0.8,
print.output = 1, save.SNN = F, n.iter = 1000)
library(cowplot)
SC3_Sureat <- RunTSNE(object = SC3_Sureat, reduction = "pca", dims = 1:npc, nthreads = 8, max_iter = 2000, check_duplicates = F)
SC3_Sureat <- RunUMAP(object = SC3_Sureat, dims = 1:npc, min_dist = 0.75)
colors <- c('#8DC73F','#25CED1','#FF8A5B', '#EA526F', '#FFCA04','#731DD8',
'#ED7B95', '#FFEA7F', '#97BC8B', '#25B07B',  '#C595CC', '#FC7500', '#A41306', '#1F363D', '#37A865')
condition_color = c('#BF4342', '#033F63','#FCB033', '#4B1D6D', '#352320', '#2A3D45', '#53713D',
'#C1909D', '#8B6878', '#30A9C2', '#43B09B')
tmp <- as.factor(as.numeric(SC3_Sureat@active.ident))
names(tmp) <- names(SC3_Sureat@active.ident)
SC3_Sureat@active.ident <- tmp
npc = 10
kpara = 500
#check pcs
SC3_Sureat <- FindNeighbors(SC3_Sureat, k.param = kpara, nn.eps = 0.5, dims = 1:npc)
SC3_Sureat <- FindClusters(object = SC3_Sureat, resolution = 0.8,
print.output = 1, save.SNN = F, n.iter = 1000)
library(cowplot)
SC3_Sureat <- RunTSNE(object = SC3_Sureat, reduction = "pca", dims = 1:npc, nthreads = 8, max_iter = 2000, check_duplicates = F)
SC3_Sureat <- RunUMAP(object = SC3_Sureat, dims = 1:npc, min_dist = 0.75)
colors <- c('#8DC73F','#25CED1','#FF8A5B', '#EA526F', '#FFCA04','#731DD8',
'#ED7B95', '#FFEA7F', '#97BC8B', '#25B07B',  '#C595CC', '#FC7500', '#A41306', '#1F363D', '#37A865')
condition_color = c('#BF4342', '#033F63','#FCB033', '#4B1D6D', '#352320', '#2A3D45', '#53713D',
'#C1909D', '#8B6878', '#30A9C2', '#43B09B')
tmp <- as.factor(as.numeric(SC3_Sureat@active.ident))
names(tmp) <- names(SC3_Sureat@active.ident)
SC3_Sureat@active.ident <- tmp
p1 <- DimPlot(object = SC3_Sureat, reduction = "tsne", do.return = TRUE, group.by = "ident", vector.friendly = TRUE, pt.size = 2, cols = colors) + ggtitle("tSNE") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p2 <- DimPlot(object = SC3_Sureat, reduction = "umap", do.return = TRUE,
vector.friendly = TRUE, pt.size = 2, cols = colors) + ggtitle("UMAP") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p3 <- DimPlot(object = SC3_Sureat, reduction = "tsne", do.return = TRUE, group.by = 'cell_type', cols = condition_color,
vector.friendly = TRUE, pt.size = 2) + ggtitle("Cell type") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
p4 <- DimPlot(object = SC3_Sureat, reduction = "umap", do.return = TRUE, group.by = 'cell_type', cols = condition_color,
vector.friendly = TRUE, pt.size = 2) + ggtitle("Cell Type") + theme(plot.title = element_text(hjust = 0.5), text = element_text(size = 20))
data.use = SC3_Sureat@assays$RNA@scale.data
ident_cell = as.data.frame(sort(SC3_Sureat@active.ident))
annotation = data.frame(row.names = SC3_Sureat@meta.data$cell_names,
cell.type = SC3_Sureat@meta.data$cell_type,
cluster = SC3_Sureat@active.ident)
cell_cluster_df = plyr::count(annotation, vars = c('cluster', 'cell.type'))
cell_count <- column_to_rownames(as.data.frame(aggregate(freq ~ cell.type, data = cell_cluster_df, sum)),'cell.type')
cell_cluster_df$percent <- paste(format((cell_cluster_df$freq / cell_count[cell_cluster_df$cell.type,]) * 100, digits = 2),"%", sep = "")
p5 <- ggbarplot(cell_cluster_df, x = 'cluster', y = "freq",
fill = "cell.type",
# color = c('#FB4944', '#9659D9'),
palette =  condition_color,
xlab = "Clusters",
ylab = "Cell Counts",
# label = "percent", lab.size = 10, lab.vjust = 1.2,
orientation = 'horiz') + theme(text = element_text(size=40),
axis.text.x = element_text(angle=90, hjust=1))
pdf(paste0(output_file, 'Cluster_Res.pdf'), height = 25, width = 50)
plot_grid(plot_grid(plot_grid(p1, p3), plot_grid(p2, p4), nrow = 2), p5, ncol = 2)
dev.off()
saveRDS(SC3_Sureat, paste0(output_file, 'Seurat_', 'K=', length(unique(SC3_Sureat@meta.data$seurat_clusters)),
'_PC=', npc, '_K.para=', kpara, '.rds'))
p1
p2
p3
p4
for(i in levels(SC3_Sureat@active.ident)){
tmp <- FindMarkers(SC3_Sureat, ident.1 = i) %>% rownames_to_column(., 'GeneName')
write.xlsx(tmp[order(tmp$avg_logFC, decreasing = T),], file = paste0(output_file,'Cluster_', i, '_Markergenes.xlsx'))
}
files <- list.files(path = output_file, pattern = "*Markergenes.xlsx",
full.names = T, recursive = F)
i = 20
selected_genes <- NULL
for (fi in files){
tmp <- read.xlsx(fi) %>% filter(p_val_adj < 0.05)
selected_genes <- c(selected_genes, head(tmp$GeneName, n = i))
}
pdf(paste0(output_file, 'Top',i, '_MarkerGene_Heatmap.pdf'), height = ifelse(length(selected_genes) == 30, 15, 25), width = 15)
DoHeatmap(SC3_Sureat, features = selected_genes, group.colors = colors)
dev.off()
library(monocle)
data <- as(as.matrix(SC3_Sureat@assays$RNA@counts), 'sparseMatrix')
# data <- data[,colMeans(data) > 0.3]
pd <- new('AnnotatedDataFrame', data = SC3_Sureat@meta.data[colnames(data),])
fData <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fData)
#Construct monocle cds
monocle_cds <- newCellDataSet(data,
phenoData = pd,
featureData = fd,
lowerDetectionLimit = 0,
expressionFamily = negbinomial.size())
monocle_cds <- estimateSizeFactors(monocle_cds)
monocle_cds <- estimateDispersions(monocle_cds)
#Run ordering algorithm
var_genes <- SC3_Sureat[['RNA']]@var.features
monocle_cds <- setOrderingFilter(monocle_cds, var_genes)
monocle_cds <- monocle_cds[var_genes,]
monocle_cds <- reduceDimension(monocle_cds, norm_method = 'vstExprs',
reduction_method="DDRTree",
max_components=2,
scaling=TRUE,
verbose=TRUE,
ncenter = nrow(monocle_cds),
pseudo_expr=0)
monocle_cds <- orderCells(monocle_cds)
monocle_cds$seurat_clusters <- as.factor(as.numeric(SC3_Sureat@active.ident[colnames(data)]))
monocle_cds$seurat_clusters <- paste0(monocle_cds$cell_type, '_',
as.factor(as.numeric(monocle_cds$seurat_clusters)))
GM_state <- function(cds, starter){
if (length(unique(pData(cds)$State)) > 1){
T0_counts <- table(pData(cds)$State, pData(cds)$seurat_cluster)[,starter]
return(as.numeric(names(T0_counts)[which
(T0_counts == max(T0_counts))]))
} else {
return (1)
}
}
# monocle_cds <- orderCells(monocle_cds[var_genes,], root_state = GM_state(monocle_cds, 'D4.5_Arm_5'))
cell_traject <- plot_cell_trajectory(monocle_cds,
color_by = "seurat_clusters",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(colors))
cell_traject_state <- plot_cell_trajectory(monocle_cds,
color_by = "State",
theta = -15,
show_branch_points = FALSE,
show_tree = TRUE,
cell_size = 2) + scale_color_manual(values = c(condition_color))
cell_traject_withstart_defined <- plot_cell_trajectory(monocle_cds, color_by = "Pseudotime") +
scale_colour_gradientn(colours = colorRampPalette(c('#6EAEA1', '#F2BF49', '#A40000'))(5))
saveRDS(monocle_cds, paste0(output_file, '/monocle2_obj_raw_vst_mp=2.rds'))
pdf(paste0(output_file, '/cell_trajectory.pdf'), height = 8, width = 18, onefile = T)
plot_grid(cell_traject, cell_traject_state)
dev.off()
